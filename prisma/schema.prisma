// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  preferredName String?
  email String @unique
  password String
  relationshipStatus RelationshipStatus? @default(single)
  sedentaryLevel Int?
  workStatus WorkStatus? @default(unemployed)
  dob DateTime?
  tasks Task[]
  equipment UserEquipment[]
  created DateTime? @default(now())
}
model Task {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name String @default("")
    link String?
    description String? @default("")
    priority Int?
    complexity Int?
    startTime DateTime?
    endTime DateTime?
    dueDate DateTime?
    completionDate DateTime? 
    place Place? @default(home)
    isLowFocus Boolean?
    isWork Boolean?
    userId String? @db.ObjectId
    user User? @relation(fields: [userId], references: [id])
    parent Task? @relation(name:"children",fields: [parentId], references: [id],onDelete: NoAction, onUpdate: NoAction)
    parentId String? @db.ObjectId
    categories TaskCategory[]
    tasks Task[]@relation("children")
    updated DateTime? @default(now())
    created DateTime? @default(now())
}
model TaskCategory{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  taskId String @db.ObjectId
  task Task @relation(fields: [taskId], references: [id])
  categoryId String @db.ObjectId
  category Category @relation(fields: [categoryId], references: [id])
  
}
model Category {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name String @default("")
    tasks TaskCategory[]
    created DateTime? @default(now())
}
model UserEquipment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String? @db.ObjectId
  user User? @relation(fields: [userId], references: [id])
  equipmentId String? @db.ObjectId
  equipment Equipment? @relation(fields: [equipmentId], references: [id])
}
model Equipment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  place Place? @default(home)
  users UserEquipment[]
  created DateTime? @default(now())
}
enum WorkStatus {
  fulltime
  student
  selfemployed
  unemployed
  retired
  parttime
}
enum RelationshipStatus {
  single
  divorced
  relationship
  situation
  separated
  widowed
}
enum Place {
  away
  home
  work
}